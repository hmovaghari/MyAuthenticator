using System;
using System.Collections.Generic;
using System.Windows.Forms;
using MyAuthenticator.FramworkApp.Properties;
using MyAuthenticator.FramworkData.Context;
using MyAuthenticator.FramworkData.Repository;
using MyAuthenticator.FramworkLibrary;
using System.Drawing;
using System.Diagnostics;
using System.Security.Policy;
using static System.Data.Entity.Infrastructure.Design.Executor;
using System.IO;
using System.Threading;

namespace MyAuthenticator.FramworkApp
{
    public partial class frmMain : Form
    {
        private PasswordDTO CurrentPasswordForShow;
        private ToolTip toolTip = new ToolTip();
        private bool isFirstRun = true;

        public frmMain()
        {
            InitializeComponent();
            ClearAutoGeneratedColumnsOfGrid();
            this.SetIcon();
        }

        private void ClearAutoGeneratedColumnsOfGrid()
        {
            var columnCount = grdPassword.ColumnCount;
            var normalCount = 7;
            if (columnCount > normalCount)
            {
                for (int i = columnCount - 1; i > normalCount - 1; --i)
                {
                    grdPassword.Columns[i].Name = string.Empty;
                    grdPassword.Columns[i].DataPropertyName = string.Empty;
                    grdPassword.Columns[i].HeaderText = string.Empty;
                    grdPassword.Columns[i].Visible = false;
                }
            }
        }

        private void frmMain_Load(object sender, EventArgs e)
        {
            SetSettings();
            ChangeLanguageOfForm();
            CheckUpdate(null, null);
            SearchData(null, null);
            isFirstRun = false;
        }

        private void CheckUpdate(object sender, EventArgs e)
        {
            var isCheckUpdateYes = GetIsCheckUpdateYes();
            var isEnglish = Functions.IsEnglish();
            var caption = isEnglish ? ResourcesEn.Get_the_new_update : ResourcesFa.Get_the_new_update;
            if (isCheckUpdateYes)
            {
                var updateContents = FramworkLibrary.Update.IsNeedUpdate(Resources.Version);
                if (updateContents.Count > 1)
                {
                    var text = (isEnglish ? ResourcesEn.IsGetUpdate : ResourcesFa.IsGetUpdate)
                        .Replace("{Resources.Version}", Resources.Version)
                        .Replace("{UpdateVersion}", updateContents[0])
                        .Replace(@"\n", "\n")
                        .Replace(@"\t", "\t");
                    var isGetUpdate = MultiLanguageMessageBox.Show(text, caption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes;
                    if (isGetUpdate)
                    {
                        Process.Start(updateContents[1]);
                    }
                }
                else if (updateContents[0] == FramworkLibrary.Update.NoConnection)
                {
                    var text = isEnglish ? ResourcesEn.NoConnection : ResourcesFa.NoConnection;
                    MultiLanguageMessageBox.Show(text, caption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else if (!isFirstRun)
                {
                    var text = isEnglish ? ResourcesEn.The_software_is_updated : ResourcesFa.The_software_is_updated;
                    MultiLanguageMessageBox.Show(text, caption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        private void ChangeLanguageOfForm()
        {
            bool isEnglish = Functions.IsEnglish();
            SetToolTip(isEnglish);
            SetFormLanguage(isEnglish);
            SetGridLanguage(isEnglish);
            ChangeFormDirection(isEnglish);
            Text += $" {Resources.Version}";
        }

        private void ChangeFormDirection(bool isEnglish)
        {
            var rightToLeft = isEnglish ? RightToLeft.No : RightToLeft.Yes;
            toolStripMenu.RightToLeft = rightToLeft;
            SetToolStripMenu(toolStripMenu.Items, rightToLeft);
            grdPassword.RightToLeft = rightToLeft;
            Functions.ChangeDirection(pnlData, rightToLeft);
            Functions.ChangeDirection(pnlSearch, rightToLeft);
            Functions.ChangeDirection(pnlCrud, rightToLeft);
        }

        private void SetToolStripMenu(ToolStripItemCollection items, RightToLeft rightToLeft)
        {
            foreach (ToolStripItem item in items)
            {
                item.RightToLeft = rightToLeft;
                var toolStripDropDownButton = item as ToolStripDropDownButton;
                var toolStripMenuItem = item as ToolStripMenuItem;
                if (toolStripDropDownButton != null || toolStripMenuItem != null)
                {
                    if (toolStripDropDownButton != null)
                    {
                        SetToolStripMenu(toolStripDropDownButton.DropDownItems, rightToLeft);
                    }
                    if (toolStripMenuItem != null)
                    {
                        SetToolStripMenu(toolStripMenuItem.DropDownItems, rightToLeft);
                    }
                }
            }
        }

        private void SetGridLanguage(bool isEnglish)
        {
            grdPassword.Columns["RowNumber"].HeaderText = isEnglish ? ResourcesEn.Row : ResourcesFa.Row;
            grdPassword.Columns["Title"].HeaderText = isEnglish ? ResourcesEn.Name : ResourcesFa.Name;
            grdPassword.Columns["PasswordString"].HeaderText = isEnglish ? ResourcesEn.Dynamic_password : ResourcesFa.Dynamic_password;
            btnShowPassword.Text = isEnglish ? ResourcesEn.Show_dynamic_password : ResourcesFa.Show_dynamic_password;
            btnCopyPassword.Text = isEnglish ? ResourcesEn.Copy_dynamic_password : ResourcesFa.Copy_dynamic_password;
        }

        private void SetFormLanguage(bool isEnglish)
        {
            Text = isEnglish ? ResourcesEn.Two_factor_authentication : ResourcesFa.Two_factor_authentication;
            toolStripSettings.Text = isEnglish ? ResourcesEn.Settings_ : ResourcesFa.Settings_;
            btnChangePassword.Text = isEnglish ? ResourcesEn.Change_password : ResourcesFa.Change_password;
            toolStripCheckAuthenticationWhen.Text = isEnglish ? ResourcesEn.Check_authentication_when : ResourcesFa.Check_authentication_when;
            btnIsGetPasswordForShowSecretKey.Text = isEnglish ? ResourcesEn.Show_secret_key : ResourcesFa.Show_secret_key;
            btnIsGetPasswordForShowDynamicPasswordKey.Text = isEnglish ? ResourcesEn.Show_dynamic_password : ResourcesFa.Show_dynamic_password;
            btnIsGetPasswordForRestoreBackup.Text = isEnglish ? ResourcesEn.BackupRestoreChange : ResourcesFa.BackupRestoreChange;
            toolStripChangeLanguage.Text = isEnglish ? ResourcesEn.Change_language : ResourcesFa.Change_language;
            toolStripDatabase.Text = isEnglish ? ResourcesEn.Database_ : ResourcesFa.Database_;
            btnOpenDatabasePath.Text = isEnglish ? ResourcesEn.OpenDatabasePath : ResourcesFa.OpenDatabasePath;
            btnChangeDatabasePath.Text = isEnglish ? ResourcesEn.Change_database_path : ResourcesFa.Change_database_path;
            btnBackup.Text = isEnglish ? ResourcesEn.Get_backup : ResourcesFa.Get_backup;
            btnRestore.Text = isEnglish ? ResourcesEn.Restore_backup : ResourcesFa.Restore_backup;
            btnDeleteDatabase.Text = isEnglish ? ResourcesEn.Clear_database : ResourcesFa.Clear_database;
            lblName.Text = (isEnglish ? ResourcesEn.Name : ResourcesFa.Name) + Functions.Colon;
            lblSecretKey.Text = (isEnglish ? ResourcesEn.Secret_key : ResourcesFa.Secret_key) + Functions.Colon;
            lblSearchName.Text = (isEnglish ? ResourcesEn.Search : ResourcesFa.Search) + Functions.Colon;
            btnSupport.Text = isEnglish ? ResourcesEn.Support : ResourcesFa.Support;
            toolStripCheckUpdateSetting.Text = isEnglish ? ResourcesEn.Check_updates_when_start : ResourcesFa.Check_updates_when_start;
            btntoolStripCheckUpdateTrue.Text = isEnglish ? ResourcesEn.Yes : ResourcesFa.Yes;
            btntoolStripCheckUpdateFalse.Text = isEnglish ? ResourcesEn.No : ResourcesFa.No;
            toolStripCheckUpdate.Text = isEnglish ? ResourcesEn.Get_the_new_update : ResourcesFa.Get_the_new_update;
        }

        private void SetSettings()
        {
            ChangeImageBtnIsGetPasswordForShowSecretKey(GetIsGetPasswordForShowSecretKeys());
            ChangeImageBtnIsGetPasswordForShowDynamicPasswordKey(GetIsGetPasswordForShowDynamicPasswords());
            ChangeImageBtnIsGetPasswordForRestoreBackup(GetIsGetPasswordForRestoreBackup());
            LoadLanguage();
            ChangeImageBtnbtntoolStripCheckUpdate(GetIsCheckUpdateYes());
        }

        private void ChangeImageBtnbtntoolStripCheckUpdate(bool isCheckUpdateYes)
        {
            btntoolStripCheckUpdateTrue.Image = isCheckUpdateYes ? Resources.Tick1 : null;
            btntoolStripCheckUpdateFalse.Image = isCheckUpdateYes ? null : Resources.Tick1;
        }

        private bool GetIsCheckUpdateYes()
        {
            return SettingRepository.IsCheckUpdateYes();
        }

        private void LoadLanguage()
        {
            var languages = SettingRepository.LanguageList;
            Functions.LoadLanuage();
            var isEnglish = Functions.IsEnglish();
            toolStripChangeLanguage.DropDownItems.Clear();
            languages.ForEach(l =>
            {
                var name = isEnglish ? l.Name() : l.Title();
                toolStripChangeLanguage.DropDownItems.Add(name, image: l.Name() == Functions.Language.Name() ? Resources.Tick1 : null);
                toolStripChangeLanguage.DropDownItems[toolStripChangeLanguage.DropDownItems.Count - 1].Click += ChangeLanguage;
            });
        }

        private void ChangeLanguage(object sender, EventArgs e)
        {
            var selectedtoolStrip = sender as ToolStripItem;
            if (selectedtoolStrip.Image == null)
            {
                var selectedText = selectedtoolStrip.Text;
                var selectedLanguage = (selectedText == Language.English.Name() || selectedText == Language.English.Title()) ?
                    Language.English : Language.Farsi;
                SettingRepository.UpdateLanguage(selectedLanguage);
                RestartForm();
            }
        }

        private void RestartForm()
        {
            DialogResult = DialogResult.Retry;
        }

        private void ChangeImageBtnIsGetPasswordForRestoreBackup(bool isActive)
        {
            btnIsGetPasswordForRestoreBackup.Image = isActive ? Resources.Tick1 : null;
        }

        private void ChangeImageBtnIsGetPasswordForShowDynamicPasswordKey(bool isActive)
        {
            btnIsGetPasswordForShowDynamicPasswordKey.Image = isActive ? Resources.Tick1 : null;
        }

        private void ChangeImageBtnIsGetPasswordForShowSecretKey(bool isActive)
        {
            btnIsGetPasswordForShowSecretKey.Image = isActive ? Resources.Tick1 : null;
        }

        private void SetToolTip(bool isEnglish)
        {
            toolTip.RemoveAll();
            toolTip.SetToolTip(btnShowSecretKey, isEnglish ? ResourcesEn.Show_secret_key : ResourcesFa.Show_secret_key);
            toolTip.SetToolTip(btnCopySecretKey, isEnglish ? ResourcesEn.Copy_secret_key : ResourcesFa.Copy_secret_key);
            toolTip.SetToolTip(btnQrCodeSecretKey, isEnglish ? ResourcesEn.Show_QrCode_of_secret_key : ResourcesFa.Show_QrCode_of_secret_key);
            toolTip.SetToolTip(btnAdd, isEnglish ? ResourcesEn.Insert : ResourcesFa.Insert);
            toolTip.SetToolTip(btnEdit, isEnglish ? ResourcesEn.Edit_ : ResourcesFa.Edit_);
            toolTip.SetToolTip(btnDelete, isEnglish ? ResourcesEn.Delete : ResourcesFa.Delete);
            toolTip.SetToolTip(btnCancel, isEnglish ? ResourcesEn.Cancel_ : ResourcesFa.Cancel_);
            toolTip.SetToolTip(btnAcc, isEnglish ? ResourcesEn.Accept_ : ResourcesFa.Accept_);
            toolTip.SetToolTip(btnGetOtpFromFile, isEnglish ? ResourcesEn.Read_QrCode_from_file : ResourcesFa.Read_QrCode_from_file);
            toolTip.SetToolTip(btnGetOtpFromSnip, isEnglish ? ResourcesEn.Read_QrCode_from_screen : ResourcesFa.Read_QrCode_from_screen);
            toolTip.SetToolTip(btnGetOtpFromCamera, isEnglish ? ResourcesEn.Read_QrCode_from_camera : ResourcesFa.Read_QrCode_from_camera);
        }

        private void AddBinding()
        {
            txtName.DataBindings.Add("Text", bsPassword, "Title");
        }

        private static PasswordDTO GetPasswordDTO(Password p)
        {
            return new PasswordDTO()
            {
                PasswordID = p.PasswordID,
                RowNumber = p.RowNumber,
                Title = p.Name,
                SecretKey = p.SecretKey,
                Counter = null,
            };
        }

        private void ClearBinding()
        {
            txtName.DataBindings.Clear();
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            EnableAddOrEdit(enable: true);

            ClearBinding();

            ClearHeader(isClearSecretKeyOnly: false);

            btnAcc.Tag = btnAdd.Name;
        }

        private void ClearHeader(bool? isClearSecretKeyOnly = null)
        {
            if (isClearSecretKeyOnly == null || isClearSecretKeyOnly == false)
            {
                txtName.ResetText();
            }
            txtSecretKey.ResetText();
        }

        private void EnableAddOrEdit(bool enable)
        {
            txtName.ReadOnly = !enable;
            txtSecretKey.ReadOnly = !enable;
            btnGetOtpFromFile.Enabled = enable;
            btnGetOtpFromSnip.Enabled = enable;
            btnGetOtpFromCamera.Enabled = enable;
            btnShowSecretKey.Enabled = !enable;
            btnCopySecretKey.Enabled = !enable;
            btnQrCodeSecretKey.Enabled = !enable;
            txtNameSearch.Enabled = !enable;
            grdPassword.Enabled = !enable;
            btnAdd.Enabled = !enable;
            btnEdit.Enabled = !enable;
            btnDelete.Enabled = !enable;
            grdPassword.Enabled = !enable;
            txtName.Enabled = enable;
            txtSecretKey.Enabled = enable;
            btnCopySecretKey.Enabled = !enable;
            btnCopyPassword.Enabled = !enable;
            btnCancel.Enabled = enable;
            btnAcc.Enabled = enable;
        }

        private void btnEdit_Click(object sender, EventArgs e)
        {
            EnableAddOrEdit(enable: true);

            ClearBinding();

            ClearHeader(isClearSecretKeyOnly: true);

            btnAcc.Tag = btnEdit.Name;
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            EnableAddOrEdit(enable: false);

            ClearHeader();

            btnAcc.Tag = string.Empty;

            SearchData(null, null);
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            var currentPassword = GetCurrentPassword();
            if (currentPassword != null)
            {
                var isEnglish = Functions.IsEnglish();
                var text = isEnglish ? ResourcesEn.Are_you_sure_to_delete_ : ResourcesFa.Are_you_sure_to_delete_;
                var caption = $"{(isEnglish ? ResourcesEn.Delete : ResourcesFa.Delete)} {currentPassword.Title}";
                var dialogResult = MultiLanguageMessageBox.Show(text, caption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dialogResult == DialogResult.Yes)
                {
                    PasswordRepository.Delete(currentPassword.PasswordData);
                    btnCancel_Click(null, null);
                }
            }
        }

        private PasswordDTO GetCurrentPassword(bool isShowPassword = false)
        {
            var currentPassword = bsPassword.Current as PasswordDTO;
            if (currentPassword != null)
            {
                if (!isShowPassword)
                {
                    return currentPassword;
                }
                else if (!GetIsGetPasswordForShowDynamicPasswords() || Program.OpenLoginForm())
                {
                    return currentPassword;
                }
                else
                {
                    return null;
                }
            }
            return currentPassword;
        }

        private void btnAcc_Click(object sender, EventArgs e)
        {
            if (ControlAddOrEdit())
            {
                var password = new PasswordDTO()
                {
                    PasswordID = IsAddMode() == true ? new Guid() :
                    IsEditMode() == true ? GetCurrentPassword().PasswordID :
                    new Guid(),
                    Title = txtName.Text,
                    SecretKey = TOTP.GetSecretKey(txtSecretKey.Text)
                };
                if (!PasswordRepository.IsDuplicate(txtName.Text, password.PasswordID))
                {
                    PasswordRepository.AddOrEdit(password.PasswordData);
                    var isAdd = btnAcc.Tag?.ToString() == btnAdd.Name;
                    btnCancel_Click(null, null);
                    if (isAdd)
                    {
                        bsPassword.MoveLast();
                    }
                }
                else
                {
                    var isEnglish = Functions.IsEnglish();
                    var text = isEnglish ? ResourcesEn.Name_is_duplicate : ResourcesFa.Name_is_duplicate;
                    var caption = isEnglish ? ResourcesEn.Input_control : ResourcesFa.Input_control;
                    MultiLanguageMessageBox.Show(text, caption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }
        }

        public bool? IsAddMode()
        {
            return btnAcc.Tag.ToString() == btnAdd.Name ? true :
                btnAcc.Tag.ToString() == string.Empty ? (bool?)null :
                false;
        }

        public bool? IsEditMode()
        {
            return btnAcc.Tag.ToString() == btnEdit.Name ? true :
                btnAcc.Tag.ToString() == string.Empty ? (bool?)null :
                false;
        }

        private bool ControlAddOrEdit()
        {
            var isEnglish = Functions.IsEnglish();
            var text = string.Empty;
            var caption = isEnglish ? ResourcesEn.Input_control : ResourcesFa.Input_control;
            if (string.IsNullOrEmpty(txtName.Text))
            {
                text = isEnglish ? ResourcesEn.Name_is_empty : ResourcesFa.Name_is_empty;
                MultiLanguageMessageBox.Show(text, caption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
            else if (IsAddMode() == true && string.IsNullOrEmpty(txtSecretKey.Text))
            {
                text = isEnglish ? ResourcesEn.Secret_key_is_empty : ResourcesFa.Secret_key_is_empty;
                MultiLanguageMessageBox.Show(text, caption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
            return true;
        }

        private void btnShowPassword_Click(object sender, EventArgs e)
        {
            if (CurrentPasswordForShow == null || !timerClearPassword.Enabled)
            {
                CurrentPasswordForShow = GetCurrentPassword(isShowPassword: true);
                if (CurrentPasswordForShow != null)
                {
                    var totp = new TOTP(CurrentPasswordForShow.SecretKey);
                    CurrentPasswordForShow.PasswordString = totp.ComputeTotp();
                    var intervalSeconds = totp.RemainingSeconds();
                    var interval = TimeSpan.FromSeconds(intervalSeconds).TotalMilliseconds;
                    CurrentPasswordForShow.Counter = intervalSeconds;
                    timerClearPassword.Interval = (int)interval;
                    timerClearPassword.Enabled = true;
                    timerClearPassword.Start();
                    timerCounter.Enabled = true;
                    timerCounter.Start();
                }
            }
            else {}
        }

        private void timerClearPassword_Tick(object sender, EventArgs e)
        {
            CurrentPasswordForShow.PasswordString = PasswordDTO.PasswordStar;
            CurrentPasswordForShow.Counter = null;
            grdPassword.Refresh();
            grdPassword.AutoResizeColumns();
            timerClearPassword.Stop();
            timerClearPassword.Enabled = false;
            CurrentPasswordForShow = null;
        }

        private void timerCounter_Tick(object sender, EventArgs e)
        {
            if (CurrentPasswordForShow?.Counter > 1)
            {
                --CurrentPasswordForShow.Counter;
                grdPassword.Refresh();
            }
            else
            {
                if (CurrentPasswordForShow != null)
                {
                    CurrentPasswordForShow.Counter = null;
                }
                grdPassword.Refresh();
                timerCounter.Stop();
                timerCounter.Enabled = false;
            }
            grdPassword.AutoResizeColumns();
        }

        private void btnCopyPassword_Click(object sender, EventArgs e)
        {
            var currentPassword = GetCurrentPassword(isShowPassword: true);
            if (currentPassword != null)
            {
                var totp = new TOTP(currentPassword.SecretKey);
                var passwordString = totp.ComputeTotp();
                Clipboard.SetText(passwordString);
                var isEnglish = Functions.IsEnglish();
                var text = isEnglish ? ResourcesEn.Copied_to_the_clipboard : ResourcesFa.Copied_to_the_clipboard;
                MultiLanguageMessageBox.Show(text, string.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void btnShowSecretKey_Click(object sender, EventArgs e)
        {
            txtSecretKey.Text = GetCurrentSecretKey(out string title);
        }

        private string GetCurrentSecretKey(out string title)
        {
            var currentPassword = GetCurrentPassword();
            string secretKey = null;
            title = null;
            if (currentPassword != null && (!GetIsGetPasswordForShowSecretKeys() || Program.OpenLoginForm()))
            {
                secretKey = TOTP.GetSecretKey(currentPassword.SecretKey);
                title = currentPassword.Title;
            }

            return secretKey;
        }

        private void btnCopySecretKey_Click(object sender, EventArgs e)
        {
            var secretKey = GetCurrentSecretKey(out string title);
            if (secretKey != null)
            {
                Clipboard.SetText(secretKey);
                var isEnglish = Functions.IsEnglish();
                var text = isEnglish ? ResourcesEn.Copied_to_the_clipboard : ResourcesFa.Copied_to_the_clipboard;
                MultiLanguageMessageBox.Show(text, string.Empty, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void bsPassword_CurrentChanged(object sender, EventArgs e)
        {
            txtSecretKey.ResetText();
        }

        private void SearchData(object sender, EventArgs e)
        {
            var name = txtNameSearch.Text;
            ClearBinding();
            var searchList = new List<PasswordDTO>();
            {
                var list = new List<Password>();
                if (string.IsNullOrEmpty(name))
                {
                    list = PasswordRepository.Get();
                }
                else
                {
                    list = PasswordRepository.Search(name);
                }
                list = PasswordRepository.OrderByRowNumber(list);
                list.ForEach(p => searchList.Add(GetPasswordDTO(p)));
            }
            bsPassword.DataSource = searchList;
            grdPassword.AutoResizeColumns();
            AddBinding();
        }

        private void btnChangePassword_Click(object sender, EventArgs e)
        {
            using (var frm = new frmLogin(ChangePasswordMode.Change))
            {
                frm.Text = btnChangePassword.Text;
                var result = frm.ShowDialog();
                if (result == DialogResult.OK)
                {
                    var isEnglish = Functions.IsEnglish();
                    var text = isEnglish ? ResourcesEn.Data_is_saved : ResourcesFa.Data_is_saved;
                    var caption = isEnglish ? ResourcesEn.Save_data : ResourcesFa.Save_data;
                    MultiLanguageMessageBox.Show(text, caption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        private void btnBackup_Click(object sender, EventArgs e)
        {
            if (ColtrolAutentication())
            {
                saveBackupDialog.Title = btnBackup.Text;
                if (saveBackupDialog.ShowDialog() == DialogResult.OK)
                {
                    AuthenticatorRepository.Backup(saveBackupDialog.FileName);
                }
            }
        }

        private bool ColtrolAutentication()
        {
            return !GetIsGetPasswordForRestoreBackup() || Program.OpenLoginForm();
        }

        private void btnRestore_Click(object sender, EventArgs e)
        {
            if (ColtrolAutentication())
            {
                var isEnglish = Functions.IsEnglish();
                var text = isEnglish ? ResourcesEn.Are_you_sure_to_restore__All_current_information_will_be_deleted_ : ResourcesFa.Are_you_sure_to_restore__All_current_information_will_be_deleted_;
                var dialogResult = MultiLanguageMessageBox.Show(text, btnRestore.Text, MessageBoxButtons.YesNo);
                openBackupDialog.Title = btnRestore.Text;
                if (dialogResult == DialogResult.Yes && openBackupDialog.ShowDialog() == DialogResult.OK)
                {
                    AuthenticatorRepository.Restore(openBackupDialog.FileName);
                    Program.Migration();
                    Program.InsertDefaultValue();
                    RestartForm();
                }
            }
        }

        private void btnDeleteDatabase_Click(object sender, EventArgs e)
        {
            if (ColtrolAutentication())
            {
                var isEnglish = Functions.IsEnglish();
                var text = isEnglish ? ResourcesEn.Are_you_sure_to_delete_the_database__All_current_information_will_be_deleted_ : ResourcesFa.Are_you_sure_to_delete_the_database__All_current_information_will_be_deleted_;
                var dialogResult = MultiLanguageMessageBox.Show(text, btnRestore.Text, MessageBoxButtons.YesNo);
                if (dialogResult == DialogResult.Yes)
                {
                    AuthenticatorRepository.DeleteDatabase();
                    AuthenticatorRepository.CreateDatabase();
                    Program.Migration();
                    Program.InsertDefaultValue();
                    RestartForm();
                }
            }
        }

        private void btnQrCodeSecretKey_Click(object sender, EventArgs e)
        {
            var secretKey = GetCurrentSecretKey(out string title);
            if (secretKey != null)
            {
                using (var frm = new frmQrCode(title, secretKey))
                {
                    var isEnlish = Functions.IsEnglish();
                    frm.Text = isEnlish ? ResourcesEn.Show_QrCode_of_secret_key : ResourcesFa.Show_QrCode_of_secret_key;
                    frm.ShowDialog();
                }
            }
        }

        private void btnIsGetPasswordForShowSecretKey_Click(object sender, EventArgs e)
        {
            var isActiveOld = GetIsGetPasswordForShowSecretKeys();
            SettingRepository.UpdateIsGetPasswordForShowSecretKeys(!isActiveOld);
            ChangeImageBtnIsGetPasswordForShowSecretKey(isActive: !isActiveOld);
        }

        private static bool GetIsGetPasswordForShowSecretKeys()
        {
            return SettingRepository.IsGetPasswordForShowSecretKeys();
        }

        private void btnIsGetPasswordForShowDynamicPasswordKey_Click(object sender, EventArgs e)
        {
            var isActiveOld = GetIsGetPasswordForShowDynamicPasswords();
            SettingRepository.UpdateIsGetPasswordForShowDynamicPasswords(!isActiveOld);
            ChangeImageBtnIsGetPasswordForShowDynamicPasswordKey(isActive: !isActiveOld);
        }

        private static bool GetIsGetPasswordForShowDynamicPasswords()
        {
            return SettingRepository.IsGetPasswordForShowDynamicPasswords();
        }

        private void grdPassword_CellContentDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            var currentCell = (sender as DataGridView).CurrentCell;
            var imageCell = (currentCell as DataGridViewImageCell);
            if (imageCell != null)
            {
                var currentPassword = GetCurrentPassword();
                decimal newRow = 0;
                switch (imageCell.Description)
                {
                    case "Up":
                        newRow = PasswordRepository.GetUpDownRowNumber(currentPassword.PasswordData, isUp: true);
                        if (newRow != 0)
                        {
                            PasswordRepository.ChangeRowNumber(currentPassword.PasswordData, newRow);
                            SearchData(null, null);
                        }
                        break;

                    case "Down":
                        newRow = PasswordRepository.GetUpDownRowNumber(currentPassword.PasswordData, isUp: false);
                        if (newRow != 0)
                        {
                            PasswordRepository.ChangeRowNumber(currentPassword.PasswordData, newRow);
                            SearchData(null, null);
                        }
                        break;

                    case "Between":
                        using (var frm = new frmChangeRow(currentPassword))
                        {
                            if (frm.ShowDialog() == DialogResult.OK)
                            {
                                newRow = frm.RowNumber;
                                PasswordRepository.ChangeRowNumber(currentPassword.PasswordData, newRow);
                                SearchData(null, null);
                            }
                        }
                        break;

                    default:
                        break;
                }
            }
        }

        private void btnIsGetPasswordForRestoreBackup_Click(object sender, EventArgs e)
        {
            var isActiveOld = GetIsGetPasswordForRestoreBackup();
            SettingRepository.UpdateIsGetPasswordForRestoreBackup(!isActiveOld);
            ChangeImageBtnIsGetPasswordForRestoreBackup(isActive: !isActiveOld);
        }

        private static bool GetIsGetPasswordForRestoreBackup()
        {
            return SettingRepository.IsGetPasswordForRestoreBackup();
        }

        private void btnGetOtpFromFile_Click(object sender, EventArgs e)
        {
            openImageDialog.Title = btnGetOtpFromFile.Tag.ToString();
            if (openImageDialog.ShowDialog() == DialogResult.OK)
            {
                var otp = TOTP.ReadOtp(openImageDialog.FileName);
                FillDataFromOpt(otp);
            }
        }

        private void FillDataFromOpt(Dictionary<string, string> otp)
        {
            if (otp != null)
            {
                txtName.Text = otp["Name"];
                txtSecretKey.Text = otp["Secret"];
            }
        }

        private void btnGetOtpFromSnip_Click(object sender, EventArgs e)
        {
            this.Hide();
            Thread.Sleep(1000);
            var bmp = frmSnippingTool.Snip();
            if (bmp != null)
            {
                var otp = TOTP.ReadOtp((Bitmap)bmp);
                FillDataFromOpt(otp);
            }
            this.Show();
        }

        private void btnGetOtpFromCamera_Click(object sender, EventArgs e)
        {
            using (var frm = new frmCamera())
            {
                if (frm.CameraCount > 0)
                {
                    var isEnglish = Functions.IsEnglish();
                    frm.Text = isEnglish ? ResourcesEn.Read_QrCode_from_camera : ResourcesFa.Read_QrCode_from_camera;
                    if (frm.ShowDialog() == DialogResult.OK)
                    {
                        var otp = frm.OTP;
                        FillDataFromOpt(otp);
                        frm.CloseCamera();
                    }
                }
                else
                {
                    var isEnglish = Functions.IsEnglish();
                    var text = isEnglish ? ResourcesEn.No_camera_found : ResourcesFa.No_camera_found;
                    var dialogResult = MultiLanguageMessageBox.Show(text, string.Empty, MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void btnSupport_Click(object sender, EventArgs e)
        {
            OpenSupport();
        }

        internal static void OpenSupport()
        {
            var isEnglish = Functions.IsEnglish();
            var url = @"http://hmovaghari.github.io/#contact:" + (isEnglish ? "en" : "fa");
            Process.Start(url);
        }

        private void ChangeIsCheckUpdate(object sender, EventArgs e)
        {
            var currentItem = sender as ToolStripMenuItem;
            var isActiveOld = GetIsCheckUpdateYes();
            if (currentItem.Name.Replace("btntoolStripCheckUpdate", string.Empty) == (!isActiveOld).ToString())
            {
                SettingRepository.UpdateIsCheckUpdate(!isActiveOld);
                ChangeImageBtnbtntoolStripCheckUpdate(!isActiveOld);
            }
        }

        private void btnChangeDatabasePath_Click(object sender, EventArgs e)
        {
            if (ColtrolAutentication())
            {
                using (var frm = new frmDataSource(isRunMoveDatabase: true, Functions.Language))
                {
                    if (frm.ShowDialog() == DialogResult.OK && !string.IsNullOrEmpty(frm.OldPath))
                    {
                        AuthenticatorRepository.MoveDatabase(frm.OldPath, AuthenticatorRepository.GetUserDataSource());
                    }
                }
            }
        }

        private void btnOpenDatabasePath_Click(object sender, EventArgs e)
        {
            Process.Start("explorer.exe", AuthenticatorRepository.GetUserDatabaseFolder());
        }
    }
}
